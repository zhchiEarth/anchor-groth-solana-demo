use anchor_lang::prelude::*;
use groth16_solana::groth16::{Groth16Verifier, Groth16Verifyingkey};

declare_id!("3dg1wKkhN4WexPV1z9Q9hJnSoqB5j3pCboBGm36UC129");

pub const VERIFYING_KEY: Groth16Verifyingkey = Groth16Verifyingkey {
    nr_pubinputs: 10,
    vk_alpha_g1: [
        10, 127, 249, 239, 216, 29, 176, 223, 195, 196, 109, 202, 173, 48, 23, 237, 80, 123, 180,
        101, 41, 144, 25, 188, 82, 13, 217, 82, 56, 57, 118, 40, 46, 76, 174, 190, 141, 228, 19,
        65, 231, 254, 10, 44, 191, 93, 127, 8, 60, 132, 147, 168, 89, 175, 168, 99, 132, 249, 123,
        151, 141, 82, 38, 126,
    ],
    vk_beta_g2: [
        8, 157, 207, 103, 166, 136, 172, 76, 100, 221, 199, 137, 197, 229, 128, 82, 48, 178, 109,
        156, 28, 85, 31, 248, 18, 41, 81, 252, 104, 92, 197, 71, 42, 90, 13, 44, 192, 241, 18, 217,
        76, 222, 48, 80, 183, 90, 167, 100, 139, 58, 124, 173, 90, 28, 122, 31, 72, 29, 186, 76,
        106, 124, 81, 83, 24, 129, 254, 245, 148, 41, 196, 158, 135, 102, 163, 31, 34, 30, 254,
        177, 233, 194, 72, 69, 56, 90, 68, 24, 75, 30, 225, 212, 186, 45, 12, 18, 6, 5, 99, 178,
        126, 219, 24, 149, 201, 188, 19, 35, 222, 9, 214, 44, 76, 44, 36, 249, 245, 224, 130, 116,
        127, 17, 164, 252, 31, 231, 102, 56,
    ],
    vk_gamme_g2: [
        19, 58, 224, 101, 74, 190, 87, 149, 144, 119, 170, 181, 86, 51, 74, 80, 247, 41, 0, 232,
        210, 196, 25, 206, 178, 172, 159, 180, 215, 27, 250, 140, 30, 94, 108, 108, 225, 126, 182,
        208, 158, 89, 122, 44, 126, 209, 123, 101, 122, 49, 198, 102, 220, 92, 189, 0, 179, 202,
        244, 177, 97, 177, 5, 209, 10, 251, 250, 95, 88, 15, 13, 72, 114, 219, 180, 196, 120, 111,
        160, 115, 81, 246, 74, 84, 53, 65, 102, 201, 107, 93, 201, 236, 43, 131, 185, 118, 21, 4,
        135, 238, 199, 217, 154, 253, 111, 63, 143, 41, 97, 125, 28, 115, 10, 201, 109, 87, 254,
        188, 34, 183, 67, 65, 236, 82, 121, 111, 170, 144,
    ],
    vk_delta_g2: [
        29, 237, 126, 168, 14, 49, 70, 36, 216, 225, 176, 247, 103, 148, 73, 15, 157, 148, 69, 97,
        246, 155, 36, 166, 54, 21, 143, 212, 115, 244, 63, 97, 33, 114, 254, 112, 230, 95, 254, 43,
        190, 213, 225, 241, 35, 206, 124, 43, 153, 212, 36, 228, 62, 16, 135, 175, 30, 252, 38,
        140, 254, 159, 250, 141, 48, 71, 205, 177, 116, 23, 23, 177, 58, 138, 82, 196, 16, 117, 88,
        247, 194, 11, 88, 126, 25, 176, 135, 2, 19, 152, 40, 143, 69, 172, 70, 255, 25, 172, 203,
        124, 176, 11, 43, 235, 26, 179, 255, 139, 219, 75, 79, 82, 55, 128, 25, 63, 118, 104, 156,
        61, 107, 3, 125, 219, 117, 123, 232, 254,
    ],
    vk_ic: &[
        [
            34, 129, 210, 31, 166, 221, 46, 172, 126, 179, 39, 86, 186, 84, 11, 68, 61, 146, 40,
            102, 49, 166, 80, 84, 142, 163, 30, 194, 173, 5, 248, 179, 1, 53, 22, 175, 229, 183,
            33, 116, 218, 229, 54, 52, 31, 94, 44, 229, 176, 31, 179, 33, 51, 19, 204, 141, 21,
            240, 2, 81, 203, 82, 109, 21,
        ],
        [
            39, 245, 134, 178, 177, 101, 255, 114, 17, 24, 17, 95, 191, 42, 27, 201, 160, 65, 137,
            39, 35, 254, 12, 31, 51, 33, 134, 101, 95, 252, 16, 140, 36, 24, 210, 127, 172, 33,
            161, 77, 76, 186, 88, 185, 152, 39, 27, 72, 124, 55, 210, 0, 146, 27, 196, 233, 81,
            241, 249, 176, 61, 57, 44, 51,
        ],
    ],
};

#[program]
pub mod anchor_groth_solana_demo {

    use super::*;

    pub fn verify(
        ctx: Context<Initialize>,
        proof: [u8; 256],
        public_inputs: [[u8; 32]; 1],
    ) -> Result<bool> {
        // let proof_a: G1Affine = G1Affine::deserialize_with_mode(
        //     &*[&change_endianness(&PROOF[0..64]), &[0u8][..]].concat(),
        //     Compress::No,
        //     Validate::Yes,
        // )
        // .unwrap();
        // let mut proof_a_neg = [0u8; 65];
        // proof_a
        //     .neg()
        //     .x
        //     .serialize_with_mode(&mut proof_a_neg[..32], Compress::No)
        //     .unwrap();
        // proof_a
        //     .neg()
        //     .y
        //     .serialize_with_mode(&mut proof_a_neg[32..], Compress::No)
        //     .unwrap();
        // let proof_a = change_endianness(&proof_a_neg[..64]).try_into().unwrap();

        let proof_a = proof[..64].try_into().unwrap();
        let proof_b = proof[64..192].try_into().unwrap();
        let proof_c = proof[192..256].try_into().unwrap();

        let mut verifier =
            Groth16Verifier::new(&proof_a, &proof_b, &proof_c, &public_inputs, &VERIFYING_KEY)
                .unwrap();

        let flag = verifier.verify().unwrap();

        msg!("verify flag: {:?}", flag);

        Ok(true)
    }
}

#[derive(Accounts)]
pub struct Initialize {}
